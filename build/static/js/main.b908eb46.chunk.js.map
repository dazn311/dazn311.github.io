{"version":3,"sources":["services/newsService.js","news/NewsElement.js","news/NewsList.js","App.js","serviceWorker.js","index.js"],"names":["newsService","getResource","a","fetch","res","json","anegdot","getAnegdotRandom","transformData","data","id","value","icon_url","isFavorite","console","log","status","resJson","name","message","transformDataR","NewsElement","news","onChange","colorStar","className","join","style","styles","li","src","alt","onClick","span2","color","protoTypes","PropTypes","object","isRequired","string","func","padding","border","borderRadius","marginBottom","display","justifyContent","span","marginRight","marginLeft","ul","listStyle","margin","NewsList","props","newsElement","map","index","key","onToggle","del","delete","initionalFavState","intervalLoopHandle","App","unmounted","useRef","React","useState","setNews","favoriteNews","setFavoriteNews","showFavorites","setShowFavorites","playLoopInterval","setPlayLoopInterval","isLoading","setIsLoading","updateNews","loop","stopPlayLoop","clearInterval","setFavoriteToLocal","elems","localStorage","setItem","JSON","stringify","useEffect","lastfavoritesElements","getItem","parse","current","toggleFavorite","newData","toggleNewsState","findIndex","elem","find","length","newFav","concat","shift","push","appendFavorite","filter","item","deleteFavorite","propTypes","number","listItems","colorLoop","buttonGroup","prevState","setInterval","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b908eb46.chunk.js","sourcesContent":["const newsService = {\r\n    // urlAPI: \"https://api.chucknorris.io/jokes/random\",\r\n    // getResource: async (url, category) => {\r\n    getResource: async () => {\r\n        // console.log('getRes ');\r\n        // const res = await fetch(url + category),\r\n        const res = await fetch(\"https://api.chucknorris.io/jokes/random\"),\r\n            anegdot = await res.json();\r\n        // console.log(\"getResource - res:\", res);\r\n        // console.log(\"getResource - fetchData:\", anegdot);\r\n\r\n        return anegdot;\r\n    },\r\n    //eslint-disable-next-line\r\n    getAnegdotRandom: async () => {\r\n        // console.log('getAnegdotRandom ');\r\n\r\n        const transformData = (data) => {\r\n            // console.log('transformData data ', data);\r\n            return {\r\n                id: data.id,\r\n                value: data.value,\r\n                icon_url: data.icon_url,\r\n                isFavorite: false\r\n            }\r\n        }\r\n        // const res = await this.getResource(this.urlAPI, '?category=dev')\r\n        try {\r\n            // const res = await this.getResource()\r\n            const res = await fetch(\"https://api.chucknorris.io/jokes/random\")\r\n            console.log(' --res', res);\r\n            if (res.status === 200) {\r\n                const resJson = await res.json();\r\n                return transformData(resJson);\r\n            } else {\r\n                return {\r\n                    id: 'data.id',\r\n                    value: 'not data from fetch',\r\n                    icon_url: '',\r\n                    isFavorite: false\r\n                }\r\n            }\r\n\r\n        } catch (e) {\r\n            console.log(e.name + ': ' + e.message + ' --daz');\r\n        }\r\n        // const res = await this.getResource()\r\n        return {\r\n            id: 'data.id',\r\n            value: 'not data from fetch',\r\n            icon_url: '',\r\n            isFavorite: false\r\n        }\r\n    },\r\n\r\n    transformDataR: (data) => {\r\n        console.log('transformDataR data ', data);\r\n        return {\r\n            id: data.id,\r\n            value: data.value,\r\n            icon_url: data.icon_url,\r\n            isFavorite: false\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default newsService;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction NewsElement({ news, value, icon_url, onChange }) {\r\n    const classes = ['animate__animated', 'animate__backInLeft']\r\n    // console.log('NewsElement news.id', news.id);\r\n    let colorStar = news.isFavorite ? 'gold' : 'gray';\r\n    // console.log('NewsElement news.isFavorite', news.isFavorite);\r\n    return (\r\n        <li className={classes.join(' ')} style={styles.li} >\r\n\r\n            <img src={icon_url} alt={icon_url}></img>\r\n            <strong>{value}</strong>\r\n            <button onClick={() => onChange(news.id)} style={styles.span2}><i style={{ color: colorStar }} className=\"fas fa-star\"></i></button>\r\n        </li>\r\n    )\r\n}\r\n\r\nNewsElement.protoTypes = {\r\n    news: PropTypes.object.isRequired,\r\n    value: PropTypes.string,\r\n    icon_url: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default NewsElement\r\n\r\nconst styles = {\r\n    li: {\r\n        padding: '5px 10px',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '4px',\r\n        marginBottom: '5px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    span: {\r\n        marginRight: '3px'\r\n    },\r\n    span2: {\r\n        marginLeft: '3px'\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport NewsElement from './NewsElement';\r\n\r\n\r\nconst styles = {\r\n    ul: {\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n}\r\n\r\nfunction NewsList(props) {\r\n    return (\r\n        <ul style={styles.ul}>\r\n            {props.newsElement.map((news, index) => {\r\n                // console.log('NewsList map index', index);\r\n                // console.log('NewsList key={news.id}', news.id);\r\n                return <NewsElement\r\n                    index={index}\r\n                    news={news}\r\n                    value={news.value}\r\n                    icon_url={news.icon_url}\r\n                    key={news.id + index}\r\n                    onChange={props.onToggle}\r\n                    del={props.delete}></NewsElement>\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nNewsList.propTypes = {\r\n    newsElement: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired,\r\n    delete: PropTypes.func.isRequired\r\n\r\n}\r\nexport default NewsList","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n//import \"./styles.css\";\nimport newsService from './services/newsService';\nimport NewsList from './news/NewsList';\n\nconst initionalFavState = [];\nvar intervalLoopHandle = -1;\n\n\n\nfunction App() {\n  const unmounted = useRef(false);\n  const [news, setNews] = React.useState(initionalFavState)\n  const [favoriteNews, setFavoriteNews] = useState(initionalFavState);\n\n  const [showFavorites, setShowFavorites] = useState(false);\n  const [playLoopInterval, setPlayLoopInterval] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  const toggleShowFavorite = () => {\n    stopPlayLoop();\n    setShowFavorites((prevState => !prevState));\n  }\n\n  const updateNews = async () => {\n    setIsLoading(true);\n    const res = await newsService.getAnegdotRandom();\n    setIsLoading(false);\n    setNews([res]);\n\n  }\n\n  const loop = async () => {\n    const res = await newsService.getAnegdotRandom();\n    console.log(\"playLoop -res.value\", res.value);\n    setNews([res]);\n  }\n\n  const stopPlayLoop = () => {\n    clearInterval(intervalLoopHandle);\n  }\n\n  const togglePlayLoop = () => {\n    setShowFavorites(false);\n\n    if (playLoopInterval) {\n      setPlayLoopInterval(false);\n      stopPlayLoop();\n\n    } else {\n      setPlayLoopInterval(true);\n      intervalLoopHandle = setInterval(() => { loop(); }, 3000);\n\n    }\n\n\n  }\n\n\n\n  const appendFavorite = (id) => {\n    const isFav = favoriteNews.find(elem => elem.id === id);\n    if (isFav) return;\n\n    const newData = { id: news[0].id, value: news[0].value, icon_url: news[0].icon_url, isFavorite: true };\n\n    if (favoriteNews.length <= 9) {\n      let newFav = [...favoriteNews, newData];\n      setFavoriteNews(newFav);\n      setFavoriteToLocal(newFav);\n\n    } else {\n      let newFav = favoriteNews.concat();\n      newFav.shift();\n      newFav.push(newData);\n      setFavoriteToLocal(newFav);\n      setFavoriteNews(newFav);\n    }\n\n\n\n  };\n  const setFavoriteToLocal = (elems) => {\n    localStorage.setItem('favoritesElements', JSON.stringify(elems));\n  }\n\n  const deleteFavorite = (id) => {\n    const newFav = favoriteNews.filter(item => item.id !== id)\n    setFavoriteNews(newFav);\n    setFavoriteToLocal(newFav);\n  };\n\n  const cleanFavorites = () => {\n    setFavoriteNews([]);\n    setFavoriteToLocal([]);\n  };\n\n  useEffect(() => {\n    updateNews();\n    const lastfavoritesElements = localStorage.getItem('favoritesElements');\n    if (lastfavoritesElements) {\n      setFavoriteNews(JSON.parse(lastfavoritesElements));\n    }\n    return () => { unmounted.current = true }\n    // eslint-disable-next-line\n  }, []);\n\n  const nextNews = () => {\n    stopPlayLoop();\n    setShowFavorites(false);\n    updateNews();\n  }\n\n  const toggleNewsState = () => {\n    let newData = news[0];\n    newData.isFavorite = !newData.isFavorite;\n    setNews(\n      [newData]\n    );\n  }\n\n  const toggleFavorite = (id) => {\n    toggleNewsState();\n    const inx = favoriteNews.findIndex(elem => elem.id === id);\n    if (inx < 0) {\n      appendFavorite(id);\n    } else {\n      deleteFavorite(id);\n    }\n\n  }\n\n  function deleteNews(title) {\n    setNews(\n      news.filter((newsElement, index) => {\n        if (newsElement.id > index) {\n          newsElement.id = index;\n        }\n        return newsElement.title !== title\n      }).map((newsElement, index) => {\n        if (newsElement.id > index) {\n          newsElement.id = index\n        }\n        return newsElement\n      })\n    )\n\n  }\n\n  let favoriteNewsLength = () => {\n    return favoriteNews.length || '0'\n  }\n\n  toggleFavorite.propTypes = {\n    id: PropTypes.number\n  }\n\n  const listItems = showFavorites ? favoriteNews : news;\n\n  let colorLoop = playLoopInterval ? 'gold' : 'gray';\n\n  const buttonGroup = <div className=\"buttonGroup\">\n    <button onClick={cleanFavorites}>Очистить Избранные</button>\n    <button onClick={toggleShowFavorite}>Избранные ({favoriteNewsLength()})</button>\n    <button onClick={nextNews}><i className=\"fas fa-angle-double-right\"></i></button>\n    <button onClick={togglePlayLoop}><i style={{ color: colorLoop }} className=\"fas fa-play-circle\"></i></button>\n  </div>;\n\n  if (isLoading) {\n    return (\n      <div className=\"App\">\n        <h1>Anegdots interactive</h1>\n        {buttonGroup}\n        <div className=\"loader\">Loading...</div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"App\">\n      <h1>Anegdots interactive</h1>\n      {buttonGroup}\n      {listItems.length ? <NewsList newsElement={listItems} onToggle={toggleFavorite} delete={deleteNews}></NewsList> : <p>Нет шуток</p>}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}