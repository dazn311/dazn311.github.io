{"version":3,"sources":["todos/Todo.js","todos/TodosList.js","model/todoModel.js","todos/add-todo.js","App.js","serviceWorker.js","index.js"],"names":["styles","li","padding","border","borderRadius","marginBottom","display","justifyContent","span","marginRight","span2","marginLeft","Todo","todo","index","onChange","del","classes","status","push","style","checked","type","className","join","title","onClick","protoTypes","PropTypes","object","isRequired","number","func","ul","listStyle","margin","TodoList","props","todos","map","key","id","onToggle","delete","list","body","isTitle","AddTodo","form","input","width","state","text","onValueChange","bind","onSubmit","e","preventDefault","this","addItem","setState","target","value","placeholder","Component","App","maxID","React","useState","setTodos","toggleTodo","indx","console","log","length","propTypes","arrayOf","string","isArray","newItem","newArr","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98f3781b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nconst styles = {\r\n    li: {\r\n        padding: '5px 10px',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '4px',\r\n        marginBottom: '5px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    span: {\r\n        marginRight: '3px'\r\n    },\r\n    span2: {\r\n        marginLeft: '3px'\r\n    }\r\n    \r\n    \r\n}\r\nfunction Todo({todo, index, onChange, del}){\r\n    const classes = []\r\n    if(todo.status){\r\n        classes.push('done')\r\n    }\r\n    return(\r\n        <li style={styles.li}>\r\n           <span style={styles.span}> \r\n           <input \r\n           checked={todo.status}\r\n           type=\"checkbox\" \r\n           onChange={() => onChange(index)}/>  {index + 1}</span> <strong className={classes.join(' ')}>{todo.title}</strong> <button onClick={() =>del(todo.title)} style={styles.span2}>&times;</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nTodo.protoTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func.isRequired,\r\n    del: PropTypes.func.isRequired\r\n}\r\nexport default Todo","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Todo from './Todo';\r\n\r\n\r\nconst styles = {\r\n    ul: {\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n}\r\nfunction TodoList(props){\r\n    return (\r\n        <ul style={styles.ul}>\r\n           {props.todos.map((todo, index) =>{\r\n               return <Todo index={index} todo={todo} key={todo.id} onChange={props.onToggle} del={props.delete}></Todo>\r\n           })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired,\r\n    delete: PropTypes.func.isRequired\r\n\r\n}\r\nexport default TodoList","\r\nlet list = [\r\n    {id: 0, title: \"acheter du pain\", body: \"купить хлеб\", isTitle: true, status: false},\r\n    {id: 1, title: \"купить молоко\", body: \"купить хлеб\", isTitle: true,  status: true},\r\n    {id: 2, title: \"купить молоко\", body: \"купить хлеб\", isTitle: true,  status: true},\r\n    {id: 3, title: \"купить масло\", body: \"купить хлеб\", isTitle: false,  status: false},\r\n    {id: 4 , title: \"купить мыло\", body: \"купить хлеб\", isTitle: false,  status: false},\r\n]\r\n\r\n\r\n\r\nexport default list","import React, {Component} from 'react';\n// import ProsType from 'prop-types';\n\nexport default class AddTodo extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            text: ''\n        }\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onSubmit(e){\n        e.preventDefault();\n        this.props.addItem(this.state.text);\n        this.setState({\n            text: ''\n        })\n    } \n    onValueChange(e){\n        this.setState ({\n            text: e.target.value\n        })\n        // console.log(\"e.target.value: \",e.target.value);\n    }\n    styles = {\n        form: {\n            border: \"1px dashed red\",\n            margin: \"0 0 5px\",\n            padding: \"3px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            input: {\n\n                width: \"70%\",\n                \n            }\n            \n            \n        }\n        \n    }\n    \n    render () {\n        return (\n            <form style={this.styles.form} onSubmit={this.onSubmit}>\n                <input type=\"text\" placeholder=\"добавьте новое сообщение\" onChange={this.onValueChange} value={this.state.text}/>\n                <button type=\"submit\">AddTodo</button>\n            </form>\n        )\n    }\n} \n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport TodoList from './todos/TodosList';\n\nimport list from './model/todoModel';\nimport AddTodo from './todos/add-todo';\n\n\nfunction App() {\n  let maxID = 0\n  const [todos, setTodos] = React.useState(list)\n  \n  maxID = todos.length\n\n  // let stat = false\n\n  function toggleTodo (indx){\n    setTodos(\n     todos.map((todo, index) => {\n        if (index === indx) {\n          todo.status = !todo.status\n          console.log('todos :',todos)\n        }\n        return todo\n      })\n    )\n  } \n\n  function deleteTodo (title){\n    setTodos(\n     todos.filter((todo, index) => {\n       if (todo.id > index){\n         todo.id = index;\n         console.log('todo.id > index :',todo.id)\n       }\n        return todo.title !== title\n      }).map((todo, index) => {\n        if (todo.id > index){\n          todo.id = index\n        }\n         return todo\n       })\n    )\n    maxID--\n\n    \n  }\n//{id: 6, title: \"купить масло\", body: \"купить хлеб\", isTitle: false,  status: false},\n  function addItem(title){\n    console.log(\"title --\",title)\n    let newItem = {\n      id: maxID, title: title, body: \"\", isTitle: true,  status: false\n    } \n    console.log(\"newItem --\",newItem)\n    let newArr = todos.concat(newItem) // Create a copy\n    setTodos(\n       newArr\n     )\n      \n  }\n  \n  toggleTodo.propTypes = {\n    todos: PropTypes.arrayOf(PropTypes.object),\n    title: PropTypes.string,\n    isArray: PropTypes.func,\n    indx: PropTypes.number\n  }\n\n  return (\n    <div className=\"App\">\n     <h1>React Totos</h1>\n     <AddTodo addItem={addItem}></AddTodo> \n     {todos.length ? <TodoList todos={todos} onToggle={toggleTodo} delete={deleteTodo}></TodoList> : <p>No todos</p>}\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}